import gspread
from oauth2client.service_account import ServiceAccountCredentials
from pprint import pprint
from time import sleep

# Sample list of part of the data for the peaks of S10
perm9 = [((([3, 5, 7], [4, 6, 8]), 3), 1), ((([3, 5, 7], [4, 6, 8]), 4), 5), ((([3, 5, 7], [4, 6, 8]), 5), 17), ((([3, 5, 7], [4, 6, 8]), 6), 45), ((([3, 5, 7], [4, 6, 8]), 7), 100), ((([3, 5, 7], [4, 6, 8]), 8), 198), ((([3, 5, 7], [4, 6, 8]), 9), 357), ((([3, 5, 7], [4, 6, 8]), 10), 597), ((([3, 5, 7], [4, 6, 8]), 11), 937), ((([3, 5, 7], [4, 6, 8]), 12), 1392), ((([3, 5, 7], [4, 6, 8]), 13), 1969), ((([3, 5, 7], [4, 6, 8]), 14), 2665), ((([3, 5, 7], [4, 6, 8]), 15), 3464), ((([3, 5, 7], [4, 6, 8]), 16), 4335), ((([3, 5, 7], [4, 6, 8]), 17), 5236), ((([3, 5, 7], [4, 6, 8]), 18), 6114), ((([3, 5, 7], [4, 6, 8]), 19), 6911), ((([3, 5, 7], [4, 6, 8]), 20), 7570), ((([3, 5, 7], [4, 6, 8]), 21), 8041), ((([3, 5, 7], [4, 6, 8]), 22), 8286), ((([3, 5, 7], [4, 6, 8]), 23), 8286), ((([3, 5, 7], [4, 6, 8]), 24), 8041), ((([3, 5, 7], [4, 6, 8]), 25), 7570), ((([3, 5, 7], [4, 6, 8]), 26), 6911), ((([3, 5, 7], [4, 6, 8]), 27), 6114), ((([3, 5, 7], [4, 6, 8]), 28), 5236), ((([3, 5, 7], [4, 6, 8]), 29), 4335), ((([3, 5, 7], [4, 6, 8]), 30), 3464), ((([3, 5, 7], [4, 6, 8]), 31), 2665), ((([3, 5, 7], [4, 6, 8]), 32), 1969), ((([3, 5, 7], [4, 6, 8]), 33), 1392), ((([3, 5, 7], [4, 6, 8]), 34), 937), ((([3, 5, 7], [4, 6, 8]), 35), 597), ((([3, 5, 7], [4, 6, 8]), 36), 357), ((([3, 5, 7], [4, 6, 8]), 37), 198), ((([3, 5, 7], [4, 6, 8]), 38), 100), ((([3, 5, 7], [4, 6, 8]), 39), 45), ((([3, 5, 7], [4, 6, 8]), 40), 17), ((([3, 5, 7], [4, 6, 8]), 41), 5), ((([3, 5, 7], [4, 6, 8]), 42), 1), ((([3, 5, 8], [3, 6, 8]), 3), 1), ((([3, 5, 8], [3, 6, 8]), 4), 6), ((([3, 5, 8], [3, 6, 8]), 5), 21), ((([3, 5, 8], [3, 6, 8]), 6), 57), ((([3, 5, 8], [3, 6, 8]), 7), 130), ((([3, 5, 8], [3, 6, 8]), 8), 261), ((([3, 5, 8], [3, 6, 8]), 9), 476), ((([3, 5, 8], [3, 6, 8]), 10), 803), ((([3, 5, 8], [3, 6, 8]), 11), 1269), ((([3, 5, 8], [3, 6, 8]), 12), 1896), ((([3, 5, 8], [3, 6, 8]), 13), 2695), ((([3, 5, 8], [3, 6, 8]), 14), 3662), ((([3, 5, 8], [3, 6, 8]), 15), 4775), ((([3, 5, 8], [3, 6, 8]), 16), 5992), ((([3, 5, 8], [3, 6, 8]), 17), 7253), ((([3, 5, 8], [3, 6, 8]), 18), 8484), ((([3, 5, 8], [3, 6, 8]), 19), 9603), ((([3, 5, 8], [3, 6, 8]), 20), 10529), ((([3, 5, 8], [3, 6, 8]), 21), 11191), ((([3, 5, 8], [3, 6, 8]), 22), 11536), ((([3, 5, 8], [3, 6, 8]), 23), 11536), ((([3, 5, 8], [3, 6, 8]), 24), 11191), ((([3, 5, 8], [3, 6, 8]), 25), 10529), ((([3, 5, 8], [3, 6, 8]), 26), 9603), ((([3, 5, 8], [3, 6, 8]), 27), 8484), ((([3, 5, 8], [3, 6, 8]), 28), 7253), ((([3, 5, 8], [3, 6, 8]), 29), 5992), ((([3, 5, 8], [3, 6, 8]), 30), 4775), ((([3, 5, 8], [3, 6, 8]), 31), 3662), ((([3, 5, 8], [3, 6, 8]), 32), 2695), ((([3, 5, 8], [3, 6, 8]), 33), 1896), ((([3, 5, 8], [3, 6, 8]), 34), 1269), ((([3, 5, 8], [3, 6, 8]), 35), 803), ((([3, 5, 8], [3, 6, 8]), 36), 476), ((([3, 5, 8], [3, 6, 8]), 37), 261), ((([3, 5, 8], [3, 6, 8]), 38), 130), ((([3, 5, 8], [3, 6, 8]), 39), 57), ((([3, 5, 8], [3, 6, 8]), 40), 21), ((([3, 5, 8], [3, 6, 8]), 41), 6), ((([3, 5, 8], [3, 6, 8]), 42), 1), ((([3, 6], [5, 8]), 2), 1), ((([3, 6], [5, 8]), 3), 5), ((([3, 6], [5, 8]), 4), 15), ((([3, 6], [5, 8]), 5), 37), ((([3, 6], [5, 8]), 6), 79), ((([3, 6], [5, 8]), 7), 151), ((([3, 6], [5, 8]), 8), 267), ((([3, 6], [5, 8]), 9), 442), ((([3, 6], [5, 8]), 10), 690), ((([3, 6], [5, 8]), 11), 1025), ((([3, 6], [5, 8]), 12), 1456), ((([3, 6], [5, 8]), 13), 1984), ((([3, 6], [5, 8]), 14), 2604), ((([3, 6], [5, 8]), 15), 3300), ((([3, 6], [5, 8]), 16), 4044), ((([3, 6], [5, 8]), 17), 4802), ((([3, 6], [5, 8]), 18), 5532), ((([3, 6], [5, 8]), 19), 6187), ((([3, 6], [5, 8]), 20), 6725), ((([3, 6], [5, 8]), 21), 7108), ((([3, 6], [5, 8]), 22), 7306), ((([3, 6], [5, 8]), 23), 7306), ((([3, 6], [5, 8]), 24), 7108), ((([3, 6], [5, 8]), 25), 6725), ((([3, 6], [5, 8]), 26), 6187), ((([3, 6], [5, 8]), 27), 5532), ((([3, 6], [5, 8]), 28), 4802), ((([3, 6], [5, 8]), 29), 4044), ((([3, 6], [5, 8]), 30), 3300), ((([3, 6], [5, 8]), 31), 2604), ((([3, 6], [5, 8]), 32), 1984), ((([3, 6], [5, 8]), 33), 1456), ((([3, 6], [5, 8]), 34), 1025), ((([3, 6], [5, 8]), 35), 690), ((([3, 6], [5, 8]), 36), 442), ((([3, 6], [5, 8]), 37), 267), ((([3, 6], [5, 8]), 38), 151), ((([3, 6], [5, 8]), 39), 79), ((([3, 6], [5, 8]), 40), 37), ((([3, 6], [5, 8]), 41), 15), ((([3, 6], [5, 8]), 42), 5), ((([3, 6], [5, 8]), 43), 1), ((([3, 7], [4, 8]), 2), 1), ((([3, 7], [4, 8]), 3), 5), ((([3, 7], [4, 8]), 4), 16), ((([3, 7], [4, 8]), 5), 40), ((([3, 7], [4, 8]), 6), 86), ((([3, 7], [4, 8]), 7), 167), ((([3, 7], [4, 8]), 8), 298), ((([3, 7], [4, 8]), 9), 497), ((([3, 7], [4, 8]), 10), 782), ((([3, 7], [4, 8]), 11), 1169), ((([3, 7], [4, 8]), 12), 1669), ((([3, 7], [4, 8]), 13), 2286), ((([3, 7], [4, 8]), 14), 3013), ((([3, 7], [4, 8]), 15), 3831), ((([3, 7], [4, 8]), 16), 4710), ((([3, 7], [4, 8]), 17), 5607), ((([3, 7], [4, 8]), 18), 6472), ((([3, 7], [4, 8]), 19), 7251), ((([3, 7], [4, 8]), 20), 7891), ((([3, 7], [4, 8]), 21), 8346), ((([3, 7], [4, 8]), 22), 8583), ((([3, 7], [4, 8]), 23), 8583), ((([3, 7], [4, 8]), 24), 8346), ((([3, 7], [4, 8]), 25), 7891), ((([3, 7], [4, 8]), 26), 7251), ((([3, 7], [4, 8]), 27), 6472), ((([3, 7], [4, 8]), 28), 5607), ((([3, 7], [4, 8]), 29), 4710), ((([3, 7], [4, 8]), 30), 3831), ((([3, 7], [4, 8]), 31), 3013), ((([3, 7], [4, 8]), 32), 2286), ((([3, 7], [4, 8]), 33), 1669), ((([3, 7], [4, 8]), 34), 1169), ((([3, 7], [4, 8]), 35), 782), ((([3, 7], [4, 8]), 36), 497), ((([3, 7], [4, 8]), 37), 298), ((([3, 7], [4, 8]), 38), 167), ((([3, 7], [4, 8]), 39), 86), ((([3, 7], [4, 8]), 40), 40), ((([3, 7], [4, 8]), 41), 16), ((([3, 7], [4, 8]), 42), 5), ((([3, 7], [4, 8]), 43), 1), (((3, 8), 2), 1), (((3, 8), 3), 5), (((3, 8), 4), 15), (((3, 8), 5), 36), (((3, 8), 6), 74), (((3, 8), 7), 137), (((3, 8), 8), 235), (((3, 8), 9), 378), (((3, 8), 10), 576), (((3, 8), 11), 837), (((3, 8), 12), 1165), (((3, 8), 13), 1560), (((3, 8), 14), 2016), (((3, 8), 15), 2520), (((3, 8), 16), 3053), (((3, 8), 17), 3590), (((3, 8), 18), 4102), (((3, 8), 19), 4559), (((3, 8), 20), 4932), (((3, 8), 21), 5196), (((3, 8), 22), 5333), (((3, 8), 23), 5333), (((3, 8), 24), 5196), (((3, 8), 25), 4932), (((3, 8), 26), 4559), (((3, 8), 27), 4102), (((3, 8), 28), 3590), (((3, 8), 29), 3053), (((3, 8), 30), 2520), (((3, 8), 31), 2016), (((3, 8), 32), 1560), (((3, 8), 33), 1165), (((3, 8), 34), 837), (((3, 8), 35), 576), (((3, 8), 36), 378), (((3, 8), 37), 235), (((3, 8), 38), 137), (((3, 8), 39), 74), (((3, 8), 40), 36), (((3, 8), 41), 15), (((3, 8), 42), 5), (((3, 8), 43), 1), ((([4], [7]), 1), 1), ((([4], [7]), 2), 3), ((([4], [7]), 3), 7), ((([4], [7]), 4), 14), ((([4], [7]), 5), 25), ((([4], [7]), 6), 43), ((([4], [7]), 7), 68), ((([4], [7]), 8), 103), ((([4], [7]), 9), 150), ((([4], [7]), 10), 209), ((([4], [7]), 11), 282), ((([4], [7]), 12), 369), ((([4], [7]), 13), 467), ((([4], [7]), 14), 575), ((([4], [7]), 15), 691), ((([4], [7]), 16), 808), ((([4], [7]), 17), 923), ((([4], [7]), 18), 1031), ((([4], [7]), 19), 1124), ((([4], [7]), 20), 1199), ((([4], [7]), 21), 1253), ((([4], [7]), 22), 1279), ((([4], [7]), 23), 1279), ((([4], [7]), 24), 1253), ((([4], [7]), 25), 1199), ((([4], [7]), 26), 1124), ((([4], [7]), 27), 1031), ((([4], [7]), 28), 923), ((([4], [7]), 29), 808), ((([4], [7]), 30), 691), ((([4], [7]), 31), 575), ((([4], [7]), 32), 467), ((([4], [7]), 33), 369), ((([4], [7]), 34), 282), ((([4], [7]), 35), 209), ((([4], [7]), 36), 150), ((([4], [7]), 37), 103), ((([4], [7]), 38), 68), ((([4], [7]), 39), 43), ((([4], [7]), 40), 25), ((([4], [7]), 41), 14), ((([4], [7]), 42), 7), ((([4], [7]), 43), 3), ((([4], [7]), 44), 1), ((([4, 6], [5, 7]), 2), 1), ((([4, 6], [5, 7]), 3), 4), ((([4, 6], [5, 7]), 4), 12), ((([4, 6], [5, 7]), 5), 29), ((([4, 6], [5, 7]), 6), 60), ((([4, 6], [5, 7]), 7), 114), ((([4, 6], [5, 7]), 8), 199), ((([4, 6], [5, 7]), 9), 325), ((([4, 6], [5, 7]), 10), 503), ((([4, 6], [5, 7]), 11), 741), ((([4, 6], [5, 7]), 12), 1044), ((([4, 6], [5, 7]), 13), 1415), ((([4, 6], [5, 7]), 14), 1848), ((([4, 6], [5, 7]), 15), 2330), ((([4, 6], [5, 7]), 16), 2846), ((([4, 6], [5, 7]), 17), 3369), ((([4, 6], [5, 7]), 18), 3870), ((([4, 6], [5, 7]), 19), 4321), ((([4, 6], [5, 7]), 20), 4690), ((([4, 6], [5, 7]), 21), 4951), ((([4, 6], [5, 7]), 22), 5088), ((([4, 6], [5, 7]), 23), 5088), ((([4, 6], [5, 7]), 24), 4951), ((([4, 6], [5, 7]), 25), 4690), ((([4, 6], [5, 7]), 26), 4321), ((([4, 6], [5, 7]), 27), 3870), ((([4, 6], [5, 7]), 28), 3369), ((([4, 6], [5, 7]), 29), 2846), ((([4, 6], [5, 7]), 30), 2330), ((([4, 6], [5, 7]), 31), 1848), ((([4, 6], [5, 7]), 32), 1415), ((([4, 6], [5, 7]), 33), 1044), ((([4, 6], [5, 7]), 34), 741), ((([4, 6], [5, 7]), 35), 503), ((([4, 6], [5, 7]), 36), 325), ((([4, 6], [5, 7]), 37), 199), ((([4, 6], [5, 7]), 38), 114), ((([4, 6], [5, 7]), 39), 60), ((([4, 6], [5, 7]), 40), 29), ((([4, 6], [5, 7]), 41), 12), ((([4, 6], [5, 7]), 42), 4), ((([4, 6], [5, 7]), 43), 1), (((4, 7), 2), 1), (((4, 7), 3), 5), (((4, 7), 4), 16), (((4, 7), 5), 41), (((4, 7), 6), 90), (((4, 7), 7), 178), (((4, 7), 8), 323), (((4, 7), 9), 546), (((4, 7), 10), 869), (((4, 7), 11), 1311), (((4, 7), 12), 1887), (((4, 7), 13), 2602), (((4, 7), 14), 3449), (((4, 7), 15), 4407), (((4, 7), 16), 5439), (((4, 7), 17), 6496), (((4, 7), 18), 7518), (((4, 7), 19), 8440), (((4, 7), 20), 9199), (((4, 7), 21), 9739), (((4, 7), 22), 10020), (((4, 7), 23), 10020), (((4, 7), 24), 9739), (((4, 7), 25), 9199), (((4, 7), 26), 8440), (((4, 7), 27), 7518), (((4, 7), 28), 6496), (((4, 7), 29), 5439), (((4, 7), 30), 4407), (((4, 7), 31), 3449), (((4, 7), 32), 2602), (((4, 7), 33), 1887), (((4, 7), 34), 1311), (((4, 7), 35), 869), (((4, 7), 36), 546), (((4, 7), 37), 323), (((4, 7), 38), 178), (((4, 7), 39), 90), (((4, 7), 40), 41), (((4, 7), 41), 16), (((4, 7), 42), 5), (((4, 7), 43), 1), ((([5], [6]), 1), 1), ((([5], [6]), 2), 3), ((([5], [6]), 3), 7), ((([5], [6]), 4), 15), ((([5], [6]), 5), 28), ((([5], [6]), 6), 49), ((([5], [6]), 7), 81), ((([5], [6]), 8), 127), ((([5], [6]), 9), 190), ((([5], [6]), 10), 274), ((([5], [6]), 11), 380), ((([5], [6]), 12), 509), ((([5], [6]), 13), 661), ((([5], [6]), 14), 832), ((([5], [6]), 15), 1018), ((([5], [6]), 16), 1212), ((([5], [6]), 17), 1405), ((([5], [6]), 18), 1587), ((([5], [6]), 19), 1749), ((([5], [6]), 20), 1880), ((([5], [6]), 21), 1972), ((([5], [6]), 22), 2020), ((([5], [6]), 23), 2020), ((([5], [6]), 24), 1972), ((([5], [6]), 25), 1880), ((([5], [6]), 26), 1749), ((([5], [6]), 27), 1587), ((([5], [6]), 28), 1405), ((([5], [6]), 29), 1212), ((([5], [6]), 30), 1018), ((([5], [6]), 31), 832), ((([5], [6]), 32), 661), ((([5], [6]), 33), 509), ((([5], [6]), 34), 380), ((([5], [6]), 35), 274), ((([5], [6]), 36), 190), ((([5], [6]), 37), 127), ((([5], [6]), 38), 81), ((([5], [6]), 39), 49), ((([5], [6]), 40), 28), ((([5], [6]), 41), 15), ((([5], [6]), 42), 7), ((([5], [6]), 43), 3), ((([5], [6]), 44), 1)]


scope = ['https://spreadsheets.google.com/feeds','https://www.googleapis.com/auth/spreadsheets','https://www.googleapis.com/auth/drive.file','https://www.googleapis.com/auth/drive']
creds = ServiceAccountCredentials.from_json_keyfile_name('creds.json',scope) # JSON file kept private
client = gspread.authorize(creds)
sheet = client.open('Symmetric Groups by Aaron Liftig').get_worksheet(0)


# In the way data was formed, it is missing zeros.
# # Therefore, update_cell had to be used instead of update_cells, which would have been faster.
def updateSheet(): # Writes above list into Google Sheets using its API
    currentRowTitle = perm9[0][0][0]
    print(currentRowTitle)
    startingRowCell = 94

    if isinstance(currentRowTitle[0],list):
        sheet.update_cell(startingRowCell,1,'{} {}'.format(list(currentRowTitle[0]),list(currentRowTitle[1])))
    else:
        sheet.update_cell(startingRowCell,1,'{}'.format(list(currentRowTitle)))

    for tup in perm9:
        if tup[0][0] == currentRowTitle:
            sheet.update_cell(startingRowCell,tup[0][1]+2,tup[1])
        else:
            startingRowCell+=1
            currentRowTitle = tup[0][0]
            if isinstance(currentRowTitle[0],list):
                sheet.update_cell(startingRowCell,1,'{} {}'.format(list(currentRowTitle[0]),list(currentRowTitle[1])))
            else:
                sheet.update_cell(startingRowCell,1,'{}'.format(list(currentRowTitle)))
            sheet.update_cell(startingRowCell,tup[0][1]+2,tup[1])
        sleep(1.2)


# updateSheet()


def determineModality(): # Checks modality of pinnacle sets, its behavior being an open research question
    cell_list = sheet.range('B73:AL102')

    currentRow = cell_list[-1].row
    previousValue = cell_list[-1].value
    state = []

    for cell in reversed(cell_list):
        if currentRow == cell.row:
            if int(cell.value) <= int(previousValue):
                previousValue = cell.value
                state.append(1)
            elif int(cell.value) > int(previousValue):
                previousValue = cell.value
                state.append(0)
            else:
                state.append('error')
        else:
            if (0 in state):
                if state[1] == 0:
                    sheet.update_cell(cell.row+1,49,'blue')
                else:
                    sheet.update_cell(cell.row+1,49,'orange')
            else:
                sheet.update_cell(cell.row+1,49,'green')
            sleep(1.1)
            currentRow = cell.row
            previousValue = cell.value
            state = [1]

    # Updates the whole batch at once
    sheet.update_cells(cell_list)


# determineModality()


def readGoogleSheet(): # Reads sheet to include zeros for checking summing paterns of peak sets
    cell_list = sheet.range('B73:AL102')
    
    bigList = []
    tempList = []
    currRow = cell_list[0].row

    for cell in cell_list:
        if cell.row == currRow:
            tempList.append(int(cell.value))
        else:
            bigList.append(tempList)
            tempList=[int(cell.value)]
            currRow = cell.row
    bigList.append(tempList)

    return bigList


def checkSums(List):
    List = sorted(List,key=lambda x:x[int(len(List[0])/2)])
    
    successList=[]
    itList = List.copy()
    for l in range(len(itList)):
        List.remove(itList[l])
        for m in range(len(List)):
            temp = [x+y for x,y in zip(itList[l],List[m])]
            if temp in itList:
                successList.append(((itList[l][int(len(List[0])/2)],List[m][int(len(List[0])/2)]),temp[int(len(List[0])/2)]))
    print(successList)
    print(len(set(successList)))


bigList = readGoogleSheet()
checkSums(bigList)
